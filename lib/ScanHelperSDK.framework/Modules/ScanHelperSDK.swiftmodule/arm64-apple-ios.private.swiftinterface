// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScanHelperSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum DoubleTapState : Swift.Int {
  case Large, Small
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AngleStyle : Swift.Int {
  case InLine, OnLine, OutLine, None
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AnimationStyle : Swift.Int {
  case LineMove, LineCenter, None
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class ScanResult : ObjectiveC.NSObject {
  @objc public var value: Swift.String
  @objc public var metadataType: AVFoundation.AVMetadataObject.ObjectType
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HighlightStyle : ObjectiveC.NSObject {
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AutoFocuStyle : ObjectiveC.NSObject {
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var limitHeight: CoreFoundation.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ScanStyle : ObjectiveC.NSObject {
  @objc public var isDebug: Swift.Bool
  @objc public var margin: Swift.Int
  @objc public var lineHeight: Swift.Int
  @objc public var lineColor: UIKit.UIColor
  @objc public var angleColor: UIKit.UIColor
  @objc public var angleLength: Swift.Int
  @objc public var angleHeight: Swift.Int
  @objc public var angleStyle: ScanHelperSDK.AngleStyle
  @objc public var anmiationStyle: ScanHelperSDK.AnimationStyle
  @objc public var autoFocuStyle: ScanHelperSDK.AutoFocuStyle
  @objc public var highlightStyle: ScanHelperSDK.HighlightStyle
  @objc public var animationImage: UIKit.UIImage?
  @objc public var unrecognizedArea: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ScanConfig : ObjectiveC.NSObject {
  @objc public var isSingle: Swift.Bool
  @objc public var isSquare: Swift.Bool
  @objc public var isDoubleTap: Swift.Bool
  @objc public var isZoom: Swift.Bool
  @objc public var isHasTorch: Swift.Bool
  @objc public var brightnessMinValue: Swift.Double
  @objc public var brightnessMaxValue: Swift.Double
  @objc public var preset: AVFoundation.AVCaptureSession.Preset
  @objc public var isPromptBox: Swift.Bool
  @objc public var sound: Swift.String?
  @objc public var animationImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var isAutoFocu: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isSingleFocu: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var scanStyle: ScanHelperSDK.ScanStyle
  @objc public var isLimit: Swift.Bool
  @objc public var isUnrestrained: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isDebugDes: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ScanHelperUIDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 11.0, *)
  @objc optional func scanLimit(_ bottomView: UIKit.UIView)
  @available(iOS 11.0, *)
  @objc optional func scanUnrestrained(_ fullView: UIKit.UIView)
  @available(iOS 11.0, *)
  @objc optional func scanCaptureOutput(_ brightnessValue: Swift.Double)
  @available(iOS 11.0, *)
  @objc optional func scanMetadataOutput(_ values: Swift.Array<ScanHelperSDK.ScanResult>)
}
@_inheritsConvenienceInitializers @objc public class ScanHelper : ObjectiveC.NSObject {
  @objc weak public var delegate: (any ScanHelperSDK.ScanHelperUIDelegate)?
  @objc deinit
  @objc override dynamic public init()
}
extension ScanHelperSDK.ScanHelper {
  @available(iOS 11.0, *)
  @objc dynamic public func start(supView: UIKit.UIView, scanConfig: ScanHelperSDK.ScanConfig = ScanConfig(), scanRegion: CoreFoundation.CGRect = .zero, scanType: [AVFoundation.AVMetadataObject.ObjectType] = [], scanHandler: ((ScanHelperSDK.ScanResult) -> Swift.Void)? = nil)
  @available(iOS 11.0, *)
  @objc dynamic public func stop()
  @available(iOS 11.0, *)
  @objc dynamic public func torchFlash(open: Swift.Bool)
  @available(iOS 11.0, *)
  @objc dynamic public func detector(image: UIKit.UIImage, ofType: Swift.String = CIDetectorTypeQRCode, context: CoreImage.CIContext? = nil, options: [Swift.String : Any]? = [CIDetectorAccuracy: CIDetectorAccuracyHigh]) -> Swift.Array<CoreImage.CIFeature>?
}
extension ScanHelperSDK.ScanHelper : UIKit.UIGestureRecognizerDelegate, AVFoundation.AVCaptureMetadataOutputObjectsDelegate, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension ScanHelperSDK.DoubleTapState : Swift.Equatable {}
extension ScanHelperSDK.DoubleTapState : Swift.Hashable {}
extension ScanHelperSDK.DoubleTapState : Swift.RawRepresentable {}
extension ScanHelperSDK.AngleStyle : Swift.Equatable {}
extension ScanHelperSDK.AngleStyle : Swift.Hashable {}
extension ScanHelperSDK.AngleStyle : Swift.RawRepresentable {}
extension ScanHelperSDK.AnimationStyle : Swift.Equatable {}
extension ScanHelperSDK.AnimationStyle : Swift.Hashable {}
extension ScanHelperSDK.AnimationStyle : Swift.RawRepresentable {}
